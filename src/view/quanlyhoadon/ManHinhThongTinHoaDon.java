/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
// Nguyen Duc Hau 22/10/2024
package view.quanlyhoadon;

import converter.GiaTienConverter;
import dao.ChiTietHoaDon_DAO;
import dao.HoaDon_DAO;
import dao.MonAnKhuyenMai_DAO;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modal.ChiTietHoaDon;
import modal.HoaDon;
import modal.MonAn;
import modal.MonAnKhuyenMai;
import java.sql.*;
import java.time.format.DateTimeFormatter;
/**
 *
 * @author ADMIN
 */
public class ManHinhThongTinHoaDon extends javax.swing.JPanel {

    /**
     * Creates new form ManHinhThongTinHoaDon
     */
    public ManHinhThongTinHoaDon() {
        initComponents();
        docdulieuDSHD();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldTenKhachHang = new javax.swing.JTextField();
        jTextFieldSoDienThoai = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButtonTimKiem = new javax.swing.JButton();
        jCheckBoxSoDienThoai = new javax.swing.JCheckBox();
        jCheckBoxTenKhachHang = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableDanhSachHoaDon = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableChiTietHoaDon = new javax.swing.JTable();
        jComboBoxLocTrangThaiHoaDon = new javax.swing.JComboBox<>();
        jButtonReSet = new javax.swing.JButton();

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Tên khách hàng:");

        jTextFieldSoDienThoai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSoDienThoaiActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Số điện thoại khách hàng:");

        jButtonTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/search (1) (1).png"))); // NOI18N
        jButtonTimKiem.setText("Tìm kiếm");
        jButtonTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTimKiemActionPerformed(evt);
            }
        });

        jCheckBoxTenKhachHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTenKhachHangActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldSoDienThoai, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldTenKhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxTenKhachHang)
                    .addComponent(jCheckBoxSoDienThoai))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonTimKiem)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBoxTenKhachHang)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldTenKhachHang)
                                .addComponent(jLabel3)))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldSoDienThoai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4))
                            .addComponent(jCheckBoxSoDienThoai, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jButtonTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTableDanhSachHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mã hóa đơn", "Tên khách hàng", "Số điện thoại", "Trạng thái", "Tổng tiền", "Ngày giờ đặt"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableDanhSachHoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableDanhSachHoaDonMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableDanhSachHoaDon);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Chi tiết hóa đơn");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Danh sách hóa đơn");

        jTableChiTietHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã món ăn", "Tên món ăn", "Giá món ăn", "Số lượng", "Phần trăm giảm giá"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableChiTietHoaDon.setRowHeight(40);
        jScrollPane2.setViewportView(jTableChiTietHoaDon);

        jComboBoxLocTrangThaiHoaDon.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jComboBoxLocTrangThaiHoaDon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Đã thanh toán", "Chưa thanh toán", "Đang xử lý" }));
        jComboBoxLocTrangThaiHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLocTrangThaiHoaDonActionPerformed(evt);
            }
        });

        jButtonReSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/refesh.png"))); // NOI18N
        jButtonReSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReSetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(252, 252, 252)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBoxLocTrangThaiHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonReSet))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(jLabel1))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonReSet)
                            .addComponent(jComboBoxLocTrangThaiHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTableDanhSachHoaDonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDanhSachHoaDonMouseClicked
        // TODO add your handling code here:
 int row = jTableDanhSachHoaDon.getSelectedRow(); // Lấy dòng được chọn
        if (row != -1) {
            String maHoaDon = jTableDanhSachHoaDon.getValueAt(row, 0).toString(); // Lấy mã hóa đơn từ dòng đó
            hienThiChiTietHoaDon(maHoaDon); // Gọi hàm để hiển thị chi tiết hóa đơn
        }
    }//GEN-LAST:event_jTableDanhSachHoaDonMouseClicked

    private void jComboBoxLocTrangThaiHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLocTrangThaiHoaDonActionPerformed
        // TODO add your handling code here:
        // Lấy trạng thái mà người dùng chọn từ JComboBox
    String selectedStatus = (String) jComboBoxLocTrangThaiHoaDon.getSelectedItem();
    
    // Gọi phương thức để lấy danh sách hóa đơn
    HoaDon_DAO hoaDonDao = new HoaDon_DAO();
    List<HoaDon> dsHoaDon = hoaDonDao.getAllHoaDon(); // Gọi hàm để lấy danh sách hóa đơn

    // Xóa dữ liệu cũ trong bảng
    DefaultTableModel model = (DefaultTableModel) jTableDanhSachHoaDon.getModel();
    model.setRowCount(0); // Xóa dữ liệu cũ

    // Duyệt qua danh sách hóa đơn và thêm vào bảng nếu trạng thái khớp
    for (HoaDon hoaDon : dsHoaDon) {
        if (hoaDon.getTrangThaiThanhToan().equals(selectedStatus)) {
            String maHoaDon = hoaDon.getMaHoaDon();
            String tenKhachHang = hoaDon.getKhachHang().getTenKhachHang();
            String soDienThoai = hoaDon.getKhachHang().getSoDienThoai();
//            String maBan = hoaDon.getBanAn().getMaBan();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
            String formattedDate = hoaDon.getNgayGioLap().format(formatter);
            String trangThaiThanhToan = hoaDon.getTrangThaiThanhToan();
            String tongTien = String.format("%,.0f VNĐ", hoaDon.getTongTien());

            // Thêm thông tin hóa đơn vào bảng
            model.addRow(new Object[]{maHoaDon, tenKhachHang, soDienThoai, trangThaiThanhToan, tongTien, formattedDate});
        }
    }
    }//GEN-LAST:event_jComboBoxLocTrangThaiHoaDonActionPerformed

    private void jButtonTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTimKiemActionPerformed
        // TODO add your handling code here:
           // Lấy giá trị từ các checkbox
    boolean timTheoTen = jCheckBoxTenKhachHang.isSelected();
    boolean timTheoSDT = jCheckBoxSoDienThoai.isSelected();

    // Lấy giá trị từ các text field tương ứng
    String tenKhachHang = jTextFieldTenKhachHang.getText().trim();
    String soDienThoai = jTextFieldSoDienThoai.getText().trim();

    // Kiểm tra điều kiện trước khi thực hiện tìm kiếm
    if (!timTheoTen && !timTheoSDT) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn ít nhất một tiêu chí tìm kiếm!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (timTheoTen && tenKhachHang.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng nhập tên khách hàng", "Thông báo", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (timTheoSDT && soDienThoai.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng nhập số điện thoại!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // Gọi hàm DAO để tìm kiếm hóa đơn dựa trên tên khách hàng và số điện thoại
        HoaDon_DAO hoaDonDao = new HoaDon_DAO();
        List<HoaDon> dsTimKiem = hoaDonDao.timHoaDon(timTheoTen ? tenKhachHang : null, timTheoSDT ? soDienThoai : null);

        // Hiển thị kết quả tìm kiếm trên bảng
        hienThiKetQuaTimKiem(dsTimKiem);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm hóa đơn: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButtonTimKiemActionPerformed
private void hienThiKetQuaTimKiem(List<HoaDon> dsTimKiem) {
    // Xóa dữ liệu cũ trong bảng
     DefaultTableModel model = (DefaultTableModel) jTableDanhSachHoaDon.getModel();
    model.setRowCount(0); // Xóa dữ liệu cũ

    // Danh sách mã hóa đơn đã thêm vào bảng để kiểm tra trùng lặp
    List<String> maHoaDonDaThem = new ArrayList<>();

    // Duyệt qua danh sách hóa đơn và thêm vào bảng
    for (HoaDon hoaDon : dsTimKiem) {
        String maHoaDon = hoaDon.getMaHoaDon();

        // Kiểm tra xem mã hóa đơn đã được thêm vào bảng chưa
        if (!maHoaDonDaThem.contains(maHoaDon)) {
            String tenKhachHang = hoaDon.getKhachHang().getTenKhachHang(); // Giả sử bạn đã có phương thức để lấy KhachHang từ HoaDon
            String soDienThoai = hoaDon.getKhachHang().getSoDienThoai(); // Tương tự như trên
//            String maBan = hoaDon.getBanAn() != null ? hoaDon.getBanAn().getMaBan() : ""; // Kiểm tra null nếu không có thông tin về bàn
            String trangThaiThanhToan = hoaDon.getTrangThaiThanhToan();
            String tongTien = String.format("%,.0f VNĐ", hoaDon.getTongTien());
           DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
           String formattedDate = hoaDon.getNgayGioLap().format(formatter);
            // Thêm thông tin hóa đơn vào bảng
            model.addRow(new Object[]{maHoaDon, tenKhachHang, soDienThoai, trangThaiThanhToan, tongTien, formattedDate});

            // Thêm mã hóa đơn vào danh sách để tránh trùng lặp
            maHoaDonDaThem.add(maHoaDon);
        }
    }
}
    private void jTextFieldSoDienThoaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSoDienThoaiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSoDienThoaiActionPerformed

    private void jCheckBoxTenKhachHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTenKhachHangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxTenKhachHangActionPerformed

    private void jButtonReSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReSetActionPerformed
        // TODO add your handling code here:
        docdulieuDSHD();
        jTextFieldSoDienThoai.setText("");
        jTextFieldTenKhachHang.setText("");
    }//GEN-LAST:event_jButtonReSetActionPerformed
// ham hien thi chi tiet hoa don
    public void hienThiChiTietHoaDon(String maHoaDon) {
    ChiTietHoaDon_DAO chiTietHoaDonDao = new ChiTietHoaDon_DAO();
    List<ChiTietHoaDon> chiTietHoaDonList = chiTietHoaDonDao.getAllChiTietHoaDon(maHoaDon); // Lấy danh sách chi tiết hóa đơn dựa trên mã hóa đơn

    // Xóa các dòng cũ trong jTableChiTietHoaDon
    DefaultTableModel model = (DefaultTableModel) jTableChiTietHoaDon.getModel();
    model.setRowCount(0);

    MonAnKhuyenMai_DAO monAnKhuyenMaiDao = new MonAnKhuyenMai_DAO();
    List<MonAnKhuyenMai> monAnKhuyenMaiList = monAnKhuyenMaiDao.getAllMonAnKhuyenMai(); // Lấy tất cả các món ăn khuyến mãi

    double tongTienMonAn = 0.0;

    // Duyệt qua danh sách chi tiết hóa đơn
    for (ChiTietHoaDon chiTiet : chiTietHoaDonList) {
        MonAn monAn = chiTiet.getMonAn();
        double phanTramGiamGia = 0.0; // Mặc định không có khuyến mãi

        // Kiểm tra xem món ăn có khuyến mãi không
        for (MonAnKhuyenMai monkm : monAnKhuyenMaiList) {
            if (monAn.getMaMonAn().equals(monkm.getMonAn().getMaMonAn())) {
                // Nếu có khuyến mãi, lấy phần trăm giảm giá
                phanTramGiamGia = monkm.getPhanTramGiamGia();
                break; // Đã tìm thấy, không cần tiếp tục duyệt
            }
        }

        // Tính thành tiền sau khi áp dụng khuyến mãi (nếu có)
        double thanhTien = (monAn.getGiaMonAn() * chiTiet.getSoLuongMonAn()) - 
                           ((monAn.getGiaMonAn() * chiTiet.getSoLuongMonAn()) * phanTramGiamGia / 100);
        tongTienMonAn += thanhTien; // Cộng dồn tổng tiền món ăn

        // Thêm dòng vào bảng danh sách món ăn
        model.addRow(new Object[]{
            monAn.getMaMonAn(),
            monAn.getTenMonAn(),
            GiaTienConverter.chuyenDoiTien(monAn.getGiaMonAn()),
            chiTiet.getSoLuongMonAn(),
            GiaTienConverter.chuyenDoiPhanTram(phanTramGiamGia),
            GiaTienConverter.chuyenDoiTien(thanhTien)
        });
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonReSet;
    private javax.swing.JButton jButtonTimKiem;
    private javax.swing.JCheckBox jCheckBoxSoDienThoai;
    private javax.swing.JCheckBox jCheckBoxTenKhachHang;
    private javax.swing.JComboBox<String> jComboBoxLocTrangThaiHoaDon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableChiTietHoaDon;
    private javax.swing.JTable jTableDanhSachHoaDon;
    private javax.swing.JTextField jTextFieldSoDienThoai;
    private javax.swing.JTextField jTextFieldTenKhachHang;
    // End of variables declaration//GEN-END:variables
public void docdulieuDSHD() {
    HoaDon_DAO hoaDonDao = new HoaDon_DAO();
    List<HoaDon> dsHoaDon = hoaDonDao.getAllHoaDon(); // Lấy danh sách hóa đơn

    // Xóa toàn bộ các hàng hiện có trong bảng
    DefaultTableModel model = (DefaultTableModel) jTableDanhSachHoaDon.getModel();
    model.setRowCount(0);

    List<String> maHoaDonDaThem = new ArrayList<>(); // Để kiểm tra trùng lặp mã hóa đơn

    // Duyệt qua danh sách hóa đơn
    for (HoaDon hoaDon : dsHoaDon) {
        String maHoaDon = hoaDon.getMaHoaDon();

        // Kiểm tra nếu mã hóa đơn đã được xử lý
        if (!maHoaDonDaThem.contains(maHoaDon)) {
            ChiTietHoaDon_DAO chiTietHoaDonDao = new ChiTietHoaDon_DAO();
            List<ChiTietHoaDon> chiTietHoaDonList = chiTietHoaDonDao.getAllChiTietHoaDon(maHoaDon);

            MonAnKhuyenMai_DAO monAnKhuyenMaiDao = new MonAnKhuyenMai_DAO();
            List<MonAnKhuyenMai> monAnKhuyenMaiList = monAnKhuyenMaiDao.getAllMonAnKhuyenMai();

            double tongTienMonAn = 0.0;

            // Tính tổng tiền các món ăn trong hóa đơn
            for (ChiTietHoaDon chiTiet : chiTietHoaDonList) {
                MonAn monAn = chiTiet.getMonAn();
                double phanTramGiamGia = 0.0;

                // Kiểm tra nếu món ăn có khuyến mãi
                for (MonAnKhuyenMai monkm : monAnKhuyenMaiList) {
                    if (monAn.getMaMonAn().equals(monkm.getMonAn().getMaMonAn())) {
                        phanTramGiamGia = monkm.getPhanTramGiamGia();
                        break;
                    }
                }

                // Tính tiền cho từng món
                double thanhTien = (monAn.getGiaMonAn() * chiTiet.getSoLuongMonAn()) - 
                                   ((monAn.getGiaMonAn() * chiTiet.getSoLuongMonAn()) * phanTramGiamGia / 100);
                tongTienMonAn += thanhTien;
            }

            // Lấy thông tin hóa đơn
            String tenKhachHang = hoaDon.getKhachHang().getTenKhachHang();
            String soDienThoai = hoaDon.getKhachHang().getSoDienThoai();
            String trangThaiThanhToan = hoaDon.getTrangThaiThanhToan();

            // Định dạng tổng tiền
            String tongTien;
            if ("Đã thanh toán".equals(trangThaiThanhToan)) {
                tongTien = String.format("%,.0f VNĐ", hoaDon.getTongTien());
            } else {
                tongTien = String.format("%,.0f VNĐ", tongTienMonAn);
            }

            // Định dạng ngày giờ
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
            String formattedDate = hoaDon.getNgayGioLap().format(formatter);

            // Thêm dữ liệu vào bảng
            model.addRow(new Object[]{maHoaDon, tenKhachHang, soDienThoai, trangThaiThanhToan, tongTien, formattedDate});

            // Đánh dấu mã hóa đơn đã xử lý
            maHoaDonDaThem.add(maHoaDon);
        }
    }
}
}
