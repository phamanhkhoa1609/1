/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.quanlygoimon;

import converter.ChuyenNguocLaiTienTe;
import converter.GiaTienConverter;
import converter.TrangThaiMonAn;
import dao.MonAn_DAO;
import java.awt.Component;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import modal.DanhMucMonAn;
import modal.MonAn;
import org.apache.commons.lang3.StringUtils;

import utils.StringUtil;

/**
 *
 * @author ADMIN
 */
public class ManHinhThongTinMonAn extends javax.swing.JPanel {

    /**
     * Creates new form ManHinhThongTinMonAn
     */
    
    
    public ManHinhThongTinMonAn() {
        initComponents();
        List<MonAn> danhSachMonAn = MonAn_DAO.danhSachMonAnTheoVaDanhMuc();

    // Hiển thị danh sách món ăn lên JTable
        hienThiDanhSachMonAn(danhSachMonAn);
        loadComboBoxData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtfTimKiem = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        comLocTheoGia = new javax.swing.JComboBox<>();
        jPanel7 = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnCapNhat = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnXoaTrang = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabelAnhMonAn = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comTrangThai = new javax.swing.JComboBox<>();
        comDanhMuc = new javax.swing.JComboBox<>();
        jtfMaMonAn = new javax.swing.JTextField();
        jtfTenMonAn = new javax.swing.JTextField();
        jtfGhiChu = new javax.swing.JTextField();
        jtfGia = new javax.swing.JTextField();
        jtfSoLuong = new javax.swing.JTextField();
        btnThayDoiAnh = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jtfDonVi = new javax.swing.JTextField();
        btnReset = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableDsMonAn = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1200, 874));

        jPanel3.setBackground(new java.awt.Color(204, 255, 204));
        jPanel3.setPreferredSize(new java.awt.Dimension(1250, 441));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chức năng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18))); // NOI18N

        jPanel5.setBackground(new java.awt.Color(255, 255, 204));
        jPanel5.setPreferredSize(new java.awt.Dimension(800, 100));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N
        jLabel1.setText("Tìm kiếm theo tên : ");

        jtfTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfTimKiemActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N
        jLabel2.setText("Lọc theo giá :");

        comLocTheoGia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Giá --", "Sắp xếp tăng dần", "Sắp xếp giảm dần" }));
        comLocTheoGia.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        comLocTheoGia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comLocTheoGiaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comLocTheoGia, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtfTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comLocTheoGia, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(102, 102, 255));

        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/diet_1.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnCapNhat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/update.png"))); // NOI18N
        btnCapNhat.setText("Cập nhật");
        btnCapNhat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCapNhatActionPerformed(evt);
            }
        });

        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/xoanew.png"))); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnXoaTrang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/xoanew2.png"))); // NOI18N
        btnXoaTrang.setText("Xóa trắng");
        btnXoaTrang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaTrangActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(btnCapNhat, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnXoaTrang, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCapNhat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnThem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnXoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnXoaTrang, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jPanel8.setBackground(new java.awt.Color(153, 255, 255));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelAnhMonAn, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelAnhMonAn, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
        );

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Tên món ăn :");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Ghi chú");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Mã món ăn :");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("Giá :");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("Số lượng : ");

        comTrangThai.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        comTrangThai.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Trạng Thái --" }));

        comDanhMuc.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        comDanhMuc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Chọn Danh Mục --" }));

        jtfMaMonAn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jtfMaMonAn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jtfMaMonAn.setEnabled(false);

        jtfTenMonAn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jtfTenMonAn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jtfGhiChu.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jtfGhiChu.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jtfGia.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jtfGia.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jtfSoLuong.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jtfSoLuong.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnThayDoiAnh.setText("Thay đổi ảnh");
        btnThayDoiAnh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThayDoiAnhActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setText("Đơn vị : ");

        jtfDonVi.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jtfDonVi.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/refesh.png"))); // NOI18N
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtfGhiChu)
                            .addComponent(jtfTenMonAn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfMaMonAn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfGia, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtfDonVi)
                                    .addComponent(jtfSoLuong, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(btnThayDoiAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comDanhMuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97)
                        .addComponent(comTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(103, 103, 103)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel6Layout.createSequentialGroup()
                                    .addComponent(jtfSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jtfDonVi, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel6Layout.createSequentialGroup()
                                    .addComponent(jtfMaMonAn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(28, 28, 28)
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jtfTenMonAn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jtfGhiChu, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtfGia, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(137, 137, 137)))))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThayDoiAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comDanhMuc, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 204, 204));

        jTableDsMonAn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jTableDsMonAn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã món ăn", "Ảnh món ăn", "Tên món ăn", "Số lượng", "Giá ", "Ghi Chú", "Đơn vị", "Trạng thái", "Danh mục"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableDsMonAn.setEditingRow(1);
        jTableDsMonAn.setRowHeight(60);
        jScrollPane1.setViewportView(jTableDsMonAn);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 1212, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jtfTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfTimKiemActionPerformed
        // TODO add your handling code here:
//        jtfTimKiem.getDocument().addDocumentListener(new DocumentListener() {
//        @Override
//        public void insertUpdate(DocumentEvent e) {
//            timKiemMonAn();
//        }
//
//        @Override
//        public void removeUpdate(DocumentEvent e) {
//            timKiemMonAn();
//        }
//
//        @Override
//        public void changedUpdate(DocumentEvent e) {
//            timKiemMonAn();
//        }
//    });
        timKiemMonAn();
    }//GEN-LAST:event_jtfTimKiemActionPerformed

    private void comLocTheoGiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comLocTheoGiaActionPerformed
        // TODO add your handling code here:
        String selectedOption = (String) comLocTheoGia.getSelectedItem();
    
    // Khai báo danh sách món ăn
        List<MonAn> danhSachMonAn = null;

        switch (selectedOption) {
            case "Sắp xếp tăng dần":
                danhSachMonAn = MonAn_DAO.layMonAnTheoGia("ASC"); // Sắp xếp tăng dần
                break;
            case "Sắp xếp giảm dần":
                danhSachMonAn = MonAn_DAO.layMonAnTheoGia("DESC"); // Sắp xếp giảm dần
                break;
            default:
              danhSachMonAn = MonAn_DAO.danhSachMonAnTheoVaDanhMuc();
                break;
             }

        if(danhSachMonAn != null){
            hienThiDanhSachMonAn(danhSachMonAn);
        }
        else{
            JOptionPane.showMessageDialog(this, "Không có món nào để hiển thị");
        }
        // Cập nhật JTable với danh sách món ăn
        
    }//GEN-LAST:event_comLocTheoGiaActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
   
       
        
        String tenDanhMuc = comDanhMuc.getSelectedItem().toString();
        String maDanhMuc = danhMucMap.get(tenDanhMuc);

        String tenMonAn = jtfTenMonAn.getText().trim();
        String giaMonAnStr = jtfGia.getText().trim();
        String soLuongStr = jtfSoLuong.getText().trim();
        String ghiChu = jtfGhiChu.getText().trim();
        String donVi = jtfDonVi.getText().trim();
        String duongDanAnh = duongDanAnhMonAn;

        // Kiểm tra ràng buộc chung trước
        if (!StringUtil.isEmpty(tenMonAn) || !StringUtil.isEmpty(giaMonAnStr) || !StringUtil.isEmpty(soLuongStr)
                || !StringUtil.isEmpty(ghiChu) || !StringUtil.isEmpty(donVi) || !StringUtil.isEmpty(duongDanAnh)) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin.");
            return;
        }

        // Kiểm tra ràng buộc từng trường
        if (!StringUtil.isEmpty(tenMonAn)) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập tên món ăn.");
            jtfTenMonAn.requestFocus();
            return;
        }

        if (!StringUtil.isEmpty(giaMonAnStr)) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập giá món ăn.");
            jtfGia.requestFocus();
            return;
        }

        if (!StringUtil.isEmpty(soLuongStr)) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập số lượng món ăn.");
            jtfSoLuong.requestFocus();
            return;
        }

        if (!StringUtil.isEmpty(donVi)) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đơn vị.");
            jtfDonVi.requestFocus();
            return;
        }

        if (maDanhMuc == null || maDanhMuc.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn danh mục món ăn.");
            comDanhMuc.requestFocus();
            return;
        }

        if (duongDanAnh.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn ảnh món ăn.");
            jLabelAnhMonAn.requestFocus();
            return;
        }

        // Kiểm tra định dạng và giá trị của giá và số lượng
        double giaMonAn;
        int soLuong;
        try {
            giaMonAn = Double.parseDouble(giaMonAnStr);
            soLuong = Integer.parseInt(soLuongStr);

            if (giaMonAn <= 0) {
                JOptionPane.showMessageDialog(this, "Giá phải lớn hơn 0.");
                jtfGia.requestFocus();
                return;
            }

            if (soLuong <= 0) {
                JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0.");
                jtfSoLuong.requestFocus();
                return;
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Giá hoặc số lượng không hợp lệ.");
            return;
        }

        boolean trangThai = comTrangThai.getSelectedItem().equals("true");

        DanhMucMonAn danhMucMonAn = new DanhMucMonAn(maDanhMuc, tenDanhMuc);
        MonAn_DAO monAnNgon = new MonAn_DAO();
        String maMonAnTuDong = monAnNgon.taoMaMonAn(maDanhMuc); 
        MonAn monAn = new MonAn(maMonAnTuDong, tenMonAn, giaMonAn, soLuong, donVi, null, ghiChu, duongDanAnh, trangThai, danhMucMonAn);

        // Thực hiện lưu xuống cơ sở dữ liệu
        if (monAnNgon.themMonAn(monAn)) {
            JOptionPane.showMessageDialog(this, "Thêm món ăn thành công!");
            xoaTrang();
        } else {
            JOptionPane.showMessageDialog(this, "Thêm món ăn thất bại!");
        }
    }//GEN-LAST:event_btnThemActionPerformed

    
    public void xoaTrang(){
        jtfMaMonAn.setText("");
        jtfTenMonAn.setText("");
        jtfGia.setText("");
        jtfSoLuong.setText("");
        jtfGhiChu.setText("");
        comTrangThai.setSelectedIndex(0);
        jtfDonVi.setText("");
        comDanhMuc.setSelectedIndex(0);
        jLabelAnhMonAn.setText(""); 
        jLabelAnhMonAn.setIcon(null); 
    }
    
    private Map<String, String> danhMucMap = new HashMap<>();

//   private void loadComboBoxData() {
//        List<MonAn> monAnn = MonAn_DAO.danhSachMonAnTheoVaDanhMuc();
//        Set<DanhMucMonAn> danhMucSet = new HashSet<>();
//        for (MonAn monAn : monAnn) {
//            danhMucSet.add(monAn.getDanhMucMonAn()); 
//        }
//
//        // Thêm tên danh mục vào ComboBox và lưu cặp maDanhMuc -> tenDanhMuc vào Map
//        for (DanhMucMonAn danhMuc : danhMucSet) {
//            comDanhMuc.addItem(danhMuc.getTenDanhMuc()); 
//            danhMucMap.put(danhMuc.getTenDanhMuc(), danhMuc.getMaDanhMuc()); 
//        }
//
//        // Sử dụng Set để loại bỏ trùng lặp cho trạng thái
//        Set<String> trangThaiSet = new HashSet<>();
//        for (MonAn monAn : monAnn) {
//            trangThaiSet.add(String.valueOf(monAn.isTinhTrangMon())); 
//        }
//        for (String trangThai : trangThaiSet) {
//            comTrangThai.addItem(trangThai);
//        }
//    }


    private String duongDanAnhMonAn;
    
    private void btnThayDoiAnhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThayDoiAnhActionPerformed
      
     // Khởi tạo JFileChooser
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image files", "jpg", "jpeg", "png", "gif"));

        int returnValue = fileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String fileName = selectedFile.getName();
            String relativePath = "image/" + fileName;
            File destination = new File(System.getProperty("user.dir") + "/" + relativePath);
            File imageDir = new File(System.getProperty("user.dir") + "/image");
            if (!imageDir.exists()) {
                imageDir.mkdirs(); // Tạo thư mục images
            }
            // Copy tệp ảnh vào thư mục images
            try {
                Files.copy(selectedFile.toPath(), destination.toPath(), StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi lưu tệp ảnh: " + e.getMessage());
                return;
            }

            // Lưu đường dẫn ảnh vào biến thành viên
            duongDanAnhMonAn = relativePath;

            // Tải hình ảnh và hiển thị lên JLabel
            ImageIcon imageIcon = new ImageIcon(destination.getAbsolutePath()); // Đường dẫn tuyệt đối của tệp đã sao chép
            Image image = imageIcon.getImage().getScaledInstance(240, 200, Image.SCALE_SMOOTH);
            jLabelAnhMonAn.setIcon(new ImageIcon(image)); // Gán ImageIcon cho JLabel

            // **Cập nhật ảnh vào cơ sở dữ liệu**
            int selectedRow = jTableDsMonAn.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn một món ăn để cập nhật ảnh.");
                return;
            }

            // Lấy mã món ăn từ bảng
            String maMonAn = jTableDsMonAn.getValueAt(selectedRow, 0).toString();

            // Cập nhật đường dẫn ảnh vào cơ sở dữ liệu
            boolean updateResult = MonAn_DAO.capNhatAnhMonAn(maMonAn, duongDanAnhMonAn);

            if (updateResult) {
                JOptionPane.showMessageDialog(this, "Cập nhật ảnh món ăn thành công!");
            } else {
                JOptionPane.showMessageDialog(this, "Cập nhật ảnh món ăn thất bại!");
            }
    
    }
    
    
    
    
    
    }//GEN-LAST:event_btnThayDoiAnhActionPerformed

    private void btnXoaTrangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaTrangActionPerformed
        // TODO add your handling code here:
         xoaTrang();
    }//GEN-LAST:event_btnXoaTrangActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
    
            // Lấy thông tin món ăn được chọn từ danh sách (table hoặc combobox)
       int selectedRow = jTableDsMonAn.getSelectedRow();

       if (selectedRow == -1) {
           // Nếu chưa chọn món ăn nào
           JOptionPane.showMessageDialog(this, "Vui lòng chọn một món ăn để xóa.");
           return;
       }

       // Lấy mã món ăn từ hàng được chọn và kiểm tra xem giá trị có null không
       Object maMonAnObj = jTableDsMonAn.getValueAt(selectedRow, 0); // Giả sử mã món ăn ở cột 0
       Object tenMonAnObj = jTableDsMonAn.getValueAt(selectedRow, 2); // Giả sử tên món ăn ở cột 1

//       if (maMonAnObj == null || tenMonAnObj == null) {
//           JOptionPane.showMessageDialog(this, "Dữ liệu món ăn không hợp lệ.");
//           return;
//       }

       String maMonAn = maMonAnObj.toString();
       String tenMonAn = tenMonAnObj.toString();

       // Hiển thị thông báo xác nhận
       int confirm = JOptionPane.showConfirmDialog(this, 
           "Bạn có chắc chắn muốn xóa món ăn: " + tenMonAn + "?", 
           "Xác nhận xóa", 
           JOptionPane.YES_NO_OPTION);

       if (confirm == JOptionPane.YES_OPTION) {
           // Gọi hàm DAO để xóa món ăn từ cơ sở dữ liệu
           MonAn_DAO monAnDAO = new MonAn_DAO();
           boolean isDeleted = monAnDAO.xoaMonAn(maMonAn);

           if (isDeleted) {
               // Nếu xóa thành công
               JOptionPane.showMessageDialog(this, "Xóa món ăn thành công!");
               // Cập nhật lại bảng danh sách món ăn
               List<MonAn> danhSachMonAn = MonAn_DAO.danhSachMonAnTheoVaDanhMuc();
               hienThiDanhSachMonAn(danhSachMonAn);
           } else {
               // Nếu xóa không thành công
               JOptionPane.showMessageDialog(this, "Xóa món ăn thất bại!");
           }
       }
        
        
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnCapNhatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCapNhatActionPerformed

        
     
        
         int selectedRow = jTableDsMonAn.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một món ăn để cập nhật.");
            return;
        }
        String maMonAn = jTableDsMonAn.getValueAt(selectedRow, 0).toString();

        MonAn monAnHienTai = MonAn_DAO.layMonAnTheoMa(maMonAn);
        
        String tenMonAnMoi = jtfTenMonAn.getText();
        double giaMonAnMoi = ChuyenNguocLaiTienTe.chuyenNguocLaiTien(jtfGia.getText());  // Chuyển giá về đúng định dạng
        int soLuongMoi = Integer.parseInt(jtfSoLuong.getText());
        String donViMoi = jtfDonVi.getText();
        String ghiChuMoi = jtfGhiChu.getText();
        String selectedTrangThai = comTrangThai.getSelectedItem().toString();
        boolean trangThaiMoi = selectedTrangThai.equals("true");
        String tenDanhMucMoi = comDanhMuc.getSelectedItem().toString();
        String maDanhMucMoi = danhMucMap.get(tenDanhMucMoi);

        // Tạo đối tượng DanhMucMonAn từ mã danh mục
        DanhMucMonAn danhMucMonAnDuocChon = new DanhMucMonAn();
        danhMucMonAnDuocChon.setMaDanhMuc(maDanhMucMoi);

        // Kiểm tra và chỉ cập nhật thông tin nếu có thay đổi
        boolean isUpdated = false;

        if (!monAnHienTai.getTenMonAn().equals(tenMonAnMoi)) {
            monAnHienTai.setTenMonAn(tenMonAnMoi);
            isUpdated = true;
        }

        if (monAnHienTai.getGiaMonAn() != giaMonAnMoi) {
            monAnHienTai.setGiaMonAn(giaMonAnMoi);
            isUpdated = true;
        }

        if (monAnHienTai.getSoLuong() != soLuongMoi) {
            monAnHienTai.setSoLuong(soLuongMoi);
            isUpdated = true;
        }

        if (!monAnHienTai.getDonVi().equals(donViMoi)) {
            monAnHienTai.setDonVi(donViMoi);
            isUpdated = true;
        }

        if ((monAnHienTai.getGhiChu() == null && ghiChuMoi != null) || 
            (monAnHienTai.getGhiChu() != null && !monAnHienTai.getGhiChu().equals(ghiChuMoi))) {
            monAnHienTai.setGhiChu(ghiChuMoi);
            isUpdated = true;
        }
        
//        if ((monAnHienTai.getAnhMonAn() == null && duongDanAnhMonAn != null) || 
//            (monAnHienTai.getAnhMonAn() != null && !monAnHienTai.getAnhMonAn().equals(duongDanAnhMonAn))) {
//            monAnHienTai.setAnhMonAn(duongDanAnhMonAn);
//             System.out.println("2" + duongDanAnhMonAn + " ff" + monAnHienTai.getAnhMonAn());
//            isUpdated = true;
//        }
        
         if (monAnHienTai.isTinhTrangMon() != trangThaiMoi) {
            monAnHienTai.setTinhTrangMon(trangThaiMoi);
             System.out.println("7");
            isUpdated = true;
        }

        if (!monAnHienTai.getDanhMucMonAn().getMaDanhMuc().equals(maDanhMucMoi)) {
            monAnHienTai.setDanhMucMonAn(danhMucMonAnDuocChon);
            isUpdated = true;
        }

        if (isUpdated) {
            boolean updateResult = MonAn_DAO.capNhatMonAn(monAnHienTai);

            if (updateResult) {
                JOptionPane.showMessageDialog(this, "Cập nhật món ăn thành công!");
                // Cập nhật lại danh sách món ăn
                List<MonAn> danhSachMonAn = MonAn_DAO.danhSachMonAnTheoVaDanhMuc();
                hienThiDanhSachMonAn(danhSachMonAn);
            } else {
                JOptionPane.showMessageDialog(this, "Cập nhật món ăn thất bại!");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Không có thay đổi nào được thực hiện.");
        }
        
    }//GEN-LAST:event_btnCapNhatActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        List<MonAn> danhSachMonAn = MonAn_DAO.danhSachMonAnTheoVaDanhMuc();
        hienThiDanhSachMonAn(danhSachMonAn);
    }//GEN-LAST:event_btnResetActionPerformed
   
    
    private void loadComboBoxData() {
        List<MonAn> monAnn = MonAn_DAO.danhSachMonAnTheoVaDanhMuc();
        Set<DanhMucMonAn> danhMucSet = new HashSet<>();
        for (MonAn monAn : monAnn) {
            danhMucSet.add(monAn.getDanhMucMonAn()); 
        }

        // Thêm tên danh mục vào ComboBox và lưu cặp maDanhMuc -> tenDanhMuc vào Map
        for (DanhMucMonAn danhMuc : danhMucSet) {
            comDanhMuc.addItem(danhMuc.getTenDanhMuc()); 
            danhMucMap.put(danhMuc.getTenDanhMuc(), danhMuc.getMaDanhMuc()); 
        }
        Set<String> trangThaiSet = new HashSet<>();
        for (MonAn monAn : monAnn) {
            trangThaiSet.add(String.valueOf(monAn.isTinhTrangMon())); 
        }
        for (String trangThai : trangThaiSet) {
            comTrangThai.addItem(trangThai);
        }
    }

    
   // hàm tìm kiếm món ăn
    private void timKiemMonAn() {
        String tenMonAn = jtfTimKiem.getText(); 
//         String tenMonAnNormalized = StringUtils.stripAccents(tenMonAn.toLowerCase());
        List<MonAn> danhSachMonAn = MonAn_DAO.timKiemMonAn(tenMonAn); 
        hienThiDanhSachMonAn(danhSachMonAn);
    }
    

    // hiển thị danh scsah món ăn lên table
    private void hienThiDanhSachMonAn(List<MonAn> danhSachMonAn) {
        DefaultTableModel model = (DefaultTableModel) jTableDsMonAn.getModel();
        model.setRowCount(0); 

        jTableDsMonAn.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                // Kiểm tra nếu giá trị là ImageIcon thì hiển thị ảnh
                if (value instanceof ImageIcon) {
                    setIcon((ImageIcon) value); 
                    setText(null); 
                } else {
                    setIcon(null); 
                }
                return this;
            }
        });


        for (MonAn monAn : danhSachMonAn) {
            Object[] rowData = new Object[9];
            rowData[0] = monAn.getMaMonAn();

            // Lấy đường dẫn ảnh và chuyển đổi thành ImageIcon
            String duongDanAnh = monAn.getAnhMonAn(); 
            if (duongDanAnh != null && !duongDanAnh.isEmpty()) {
                java.net.URL imageURL = getClass().getClassLoader().getResource(duongDanAnh);
                if (imageURL != null) {
                    ImageIcon icon = new ImageIcon(imageURL);
                    Image img = icon.getImage().getScaledInstance(150, 100, Image.SCALE_SMOOTH); 
                    rowData[1] = new ImageIcon(img);
                } else {
                    System.out.println("Không tìm thấy file ảnh từ đường dẫn: " + duongDanAnh);
                    rowData[1] = null;
                }
            } else {
                // Sử dụng ảnh mặc định nếu không có ảnh
                ImageIcon defaultIcon = new ImageIcon(getClass().getClassLoader().getResource("duong_dan_hinh_anh_mac_dinh.jpg"));
                Image img = defaultIcon.getImage().getScaledInstance(150, 100, Image.SCALE_SMOOTH); 
                rowData[1] = new ImageIcon(img);
            }
            // set mon len componet
            rowData[2] = monAn.getTenMonAn();
            rowData[3] = monAn.getSoLuong();  
            rowData[4] = GiaTienConverter.chuyenDoiTien(monAn.getGiaMonAn());
            rowData[5] = monAn.getGhiChu();  
            rowData[6] = monAn.getDonVi();  
            rowData[7] = monAn.isTinhTrangMon(); 
            rowData[8] = monAn.getDanhMucMonAn().getTenDanhMuc(); 

            model.addRow(rowData);
        }

        // Thêm ListSelectionListener để cập nhật thông tin khi chọn dòng
        jTableDsMonAn.getSelectionModel().addListSelectionListener(event -> {
            // Kiểm tra xem có dòng nào đang được chọn không
            int selectedRow = jTableDsMonAn.getSelectedRow();
            if (selectedRow >= 0) {
                // Lấy giá trị từ hàng được chọn và điền vào JTextField và JComboBox
                jtfMaMonAn.setText(model.getValueAt(selectedRow, 0).toString());
                jtfTenMonAn.setText(model.getValueAt(selectedRow, 2).toString());
                jtfSoLuong.setText(model.getValueAt(selectedRow, 3).toString());
                jtfGia.setText(model.getValueAt(selectedRow, 4).toString());
                jtfGhiChu.setText(model.getValueAt(selectedRow, 5).toString());
                jtfDonVi.setText(model.getValueAt(selectedRow, 6).toString());
                boolean tinhTrangMon = (boolean) model.getValueAt(selectedRow, 7);
                comTrangThai.setSelectedItem(tinhTrangMon ? "true" : "false");
                String danhMuc = model.getValueAt(selectedRow, 8).toString();
                comDanhMuc.setSelectedItem(danhMuc);

                ImageIcon icon = (ImageIcon) model.getValueAt(selectedRow, 1);
                if (icon != null) {
                    // Lấy ảnh gốc từ ImageIcon
                    Image img = icon.getImage();
                    // Tùy chỉnh kích thước ảnh (150x100), có thể thay đổi kích thước theo nhu cầu
                    Image scaledImg = img.getScaledInstance(245, 210, Image.SCALE_SMOOTH);
                    ImageIcon scaledIcon = new ImageIcon(scaledImg);
                    // Đặt ảnh đã chỉnh kích thước vào jLabelAnhMonAn
                    jLabelAnhMonAn.setIcon(scaledIcon);
                        } else {
                            jLabelAnhMonAn.setIcon(null);
                        }

             }
        });
    }


    




    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCapNhat;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnThayDoiAnh;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXoaTrang;
    private javax.swing.JComboBox<String> comDanhMuc;
    private javax.swing.JComboBox<String> comLocTheoGia;
    private javax.swing.JComboBox<String> comTrangThai;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelAnhMonAn;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableDsMonAn;
    private javax.swing.JTextField jtfDonVi;
    private javax.swing.JTextField jtfGhiChu;
    private javax.swing.JTextField jtfGia;
    private javax.swing.JTextField jtfMaMonAn;
    private javax.swing.JTextField jtfSoLuong;
    private javax.swing.JTextField jtfTenMonAn;
    private javax.swing.JTextField jtfTimKiem;
    // End of variables declaration//GEN-END:variables
}
