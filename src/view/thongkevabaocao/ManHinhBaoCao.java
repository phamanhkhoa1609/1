/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.thongkevabaocao;



import converter.DinhDangTien;
import dao.KetCa_DAO;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.time.LocalDateTime;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfDocument;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import dao.NhanVien_DAO;

import java.awt.Color;
import java.awt.Font;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import javax.swing.*;
import modal.NhanVien;
import modal.TaiKhoan;
import org.apache.poi.xddf.usermodel.text.TextAlignment;
import utils.PDFUtils;


/**
 *
 * @author ADMIN
 */
public class ManHinhBaoCao extends javax.swing.JPanel {

    /**
     * Creates new form ManHinhBaoCao
     */
    
    private TaiKhoan taiKhoan;
    NhanVien_DAO nv_dao = new NhanVien_DAO();
                
    
    public ManHinhBaoCao(TaiKhoan taiKhoan) {
        this.taiKhoan = taiKhoan;
        initComponents();
        KetCaPanel();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 897, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 455, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private JTextField txtMaKetCa, txtMaNhanVien, txtSoDuDauCa, txtSoDuTienMat, txtTongDoanhThu;
    private JTextArea txtGhiChu;
    private JLabel lblChenhLech, lblKetQuaChenhLech;
    private JButton btnKetCa, btnHuy;

    public void KetCaPanel() {
        setLayout(new BorderLayout(10, 10));
        setBackground(new Color(245, 245, 245));

        // Header
        JLabel lblTitle = new JLabel("KẾT CA NHÂN VIÊN", JLabel.CENTER);
        lblTitle.setFont(new Font("Arial", Font.BOLD, 24));
        lblTitle.setForeground(new Color(0, 102, 204));
        add(lblTitle, BorderLayout.NORTH);

        // Center Panel
        JPanel panelCenter = new JPanel();
        panelCenter.setLayout(new GridBagLayout());
        panelCenter.setBackground(Color.WHITE);
        panelCenter.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 10, 10);

        // Input fields
        gbc.gridx = 0; gbc.gridy = 0;
        panelCenter.add(new JLabel("Mã Kết Ca:"), gbc);

        txtMaKetCa = new JTextField(20);
        gbc.gridx = 1; gbc.gridy = 0;
        panelCenter.add(txtMaKetCa, gbc);

        gbc.gridx = 0; gbc.gridy = 1;
        panelCenter.add(new JLabel("Mã Nhân Viên:"), gbc);

        txtMaNhanVien = new JTextField(20);
        gbc.gridx = 1; gbc.gridy = 1;
        panelCenter.add(txtMaNhanVien, gbc);

        gbc.gridx = 0; gbc.gridy = 2;
        panelCenter.add(new JLabel("Số Dư Đầu Ca:"), gbc);

        txtSoDuDauCa = new JTextField(20);
        gbc.gridx = 1; gbc.gridy = 2;
        panelCenter.add(txtSoDuDauCa, gbc);

        gbc.gridx = 0; gbc.gridy = 3;
        panelCenter.add(new JLabel("Số Dư Tiền Mặt (Nhập):"), gbc);

        txtSoDuTienMat = new JTextField(20);
        gbc.gridx = 1; gbc.gridy = 3;
        panelCenter.add(txtSoDuTienMat, gbc);

        gbc.gridx = 0; gbc.gridy = 4;
        panelCenter.add(new JLabel("Tổng Doanh Thu:"), gbc);

        txtTongDoanhThu = new JTextField(20);
        gbc.gridx = 1; gbc.gridy = 4;
        panelCenter.add(txtTongDoanhThu, gbc);

        gbc.gridx = 0; gbc.gridy = 5;
        panelCenter.add(new JLabel("Ghi Chú:"), gbc);

        txtGhiChu = new JTextArea(4, 20);
        txtGhiChu.setLineWrap(true);
        txtGhiChu.setWrapStyleWord(true);
        JScrollPane scrollPane = new JScrollPane(txtGhiChu);
        gbc.gridx = 1; gbc.gridy = 5;
        panelCenter.add(scrollPane, gbc);

        // Display chênh lệch
        gbc.gridx = 0; gbc.gridy = 6;
        panelCenter.add(new JLabel("Chênh Lệch:"), gbc);

        lblChenhLech = new JLabel("0.00 VNĐ");
        lblChenhLech.setFont(new Font("Arial", Font.BOLD, 16));
        lblChenhLech.setForeground(Color.RED);
        gbc.gridx = 1; gbc.gridy = 6;
        panelCenter.add(lblChenhLech, gbc);

        // Add Center Panel
        add(panelCenter, BorderLayout.CENTER);

       // Footer
        JPanel panelFooter = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 10));

        // Nút Kết Ca
        btnKetCa = new JButton("Kết Ca");
        btnKetCa.setBackground(new Color(34, 139, 34));
        btnKetCa.setForeground(Color.WHITE);
        btnKetCa.setFont(new Font("Arial", Font.BOLD, 14));
        panelFooter.add(btnKetCa);

        // Nút Hủy
        btnHuy = new JButton("Hủy");
        btnHuy.setBackground(new Color(178, 34, 34));
        btnHuy.setForeground(Color.WHITE);
        btnHuy.setFont(new Font("Arial", Font.BOLD, 14));
        panelFooter.add(btnHuy);

        // Nút In Báo Cáo
        JButton btnInBaoCao = new JButton("In Báo Cáo");
        btnInBaoCao.setBackground(new Color(70, 130, 180)); // Màu xanh dương
        btnInBaoCao.setForeground(Color.WHITE);
        btnInBaoCao.setFont(new Font("Arial", Font.BOLD, 14));
        panelFooter.add(btnInBaoCao);

        // Thêm footer vào giao diện
        add(panelFooter, BorderLayout.SOUTH);
        btnInBaoCao.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(null, "Chức năng in báo cáo đang được thực hiện.", "Thông Báo", JOptionPane.INFORMATION_MESSAGE);
                // Gọi hàm xử lý in báo cáo tại đây
            }
        });
        btnKetCa.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleKetCa();
            }
        });
        
        btnInBaoCao.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                exportReportToPDF();
            }
        });


        btnHuy.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resetFields();
            }
        });
        txtSoDuTienMat.addKeyListener(new KeyAdapter() {
    @Override
    public void keyReleased(KeyEvent e) {
        String text = txtSoDuTienMat.getText().replaceAll("[^0-9]", ""); 
        if (!text.isEmpty()) {
            try {
                double amount = Double.parseDouble(text);
                txtSoDuTienMat.setText(DinhDangTien.chuyenSangVNDKetCa(amount));
            } catch (NumberFormatException ex) {
                txtSoDuTienMat.setText("");
            }
        }
    }
});

    }

    private void handleKetCa() {
        try {
            double soDuDauCa = Double.parseDouble(txtSoDuDauCa.getText().replaceAll("[^\\d.]", ""));
            double soDuTienMat = Double.parseDouble(txtSoDuTienMat.getText().replaceAll("[^\\d.]", ""));
            double tongDoanhThu = Double.parseDouble(txtTongDoanhThu.getText().replaceAll("[^\\d.]", ""));


            String ghiChu = txtGhiChu.getText();
            double expectedTotal = soDuDauCa + tongDoanhThu;
            double chenhLech = soDuTienMat - expectedTotal;

            lblChenhLech.setText(String.format(DinhDangTien.chuyenSangVNDKetCa(chenhLech)));
            lblChenhLech.setForeground(chenhLech == 0 ? new Color(34, 139, 34) : Color.RED);

            // Lưu thông tin kết ca vào database
            if (chenhLech == 0) {
                KetCa_DAO ketCaDAO = new KetCa_DAO();
                boolean isSaved = ketCaDAO.saveKetCa(
                    txtMaKetCa.getText(),
                    txtMaNhanVien.getText(),
                    ngayGioBatDau,
                    LocalDateTime.now(), // Ngày giờ kết thúc ca
                    soDuDauCa,
                    soDuTienMat, // Số dư cuối ca
                    tongDoanhThu,
                    ghiChu
                );

                if (isSaved) {
                    JOptionPane.showMessageDialog(this, "Kết ca thành công!", "Thông Báo", JOptionPane.INFORMATION_MESSAGE);
                    resetFields(); // Đặt lại các trường sau khi kết ca
                } else {
                    JOptionPane.showMessageDialog(this, "Lỗi khi lưu thông tin kết ca!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Có sự chênh lệch tiền mặt. Vui lòng kiểm tra!", "Thông Báo", JOptionPane.WARNING_MESSAGE);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ và đúng định dạng số!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void exportReportToPDF() {
        // Sử dụng JFileChooser để chọn đường dẫn lưu file
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn nơi lưu file báo cáo");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setSelectedFile(new java.io.File("BaoCao_KetCa.pdf")); 

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            String filePath = fileChooser.getSelectedFile().getAbsolutePath();

            try {
                // Đảm bảo file có đuôi ".pdf"
                if (!filePath.endsWith(".pdf")) {
                    filePath += ".pdf";
                }
                Document document = new Document();
                PdfWriter.getInstance(document, new FileOutputStream(filePath));
                document.open();
                Paragraph title = new Paragraph("BÁO CÁO KÊT CA", 
                    new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.TIMES_ROMAN, 18, com.itextpdf.text.Font.BOLD));
                title.setAlignment(Paragraph.ALIGN_CENTER);
                document.add(title);
                
                NhanVien nv = null;
                if(taiKhoan.getVaiTro().equalsIgnoreCase("NhanVien")){
                    nv = nv_dao.layThongTinNhanVien(taiKhoan.getTenNguoiDung());
                }
//                NhanVien hoten = nv.layTenNhanVien(); 
                // Thông tin nhân viên và ca
                document.add(new Paragraph("Mã kêt ca: " + txtMaKetCa.getText()));
                document.add(new Paragraph("Mã nhân viên: " + txtMaNhanVien.getText()));
                document.add(new Paragraph("Tên nhân viên: " + nv.getHo() + " " + nv.getTen()));
                document.add(new Paragraph("Sô dư đâu ca: " + txtSoDuDauCa.getText()));
                document.add(new Paragraph("Sô du tiên mat cuôi ca: " + txtSoDuTienMat.getText()));
                document.add(new Paragraph("Tông doanh thu: " + txtTongDoanhThu.getText()));

                // Chênh lệch
                double soDuDauCa = Double.parseDouble(txtSoDuDauCa.getText().replaceAll("[^\\d.]", ""));
                double soDuTienMat = Double.parseDouble(txtSoDuTienMat.getText().replaceAll("[^\\d.]", ""));
                double tongDoanhThu = Double.parseDouble(txtTongDoanhThu.getText().replaceAll("[^\\d.]", ""));
                double chenhLech = soDuTienMat - (soDuDauCa + tongDoanhThu);
                document.add(new Paragraph("Chênh lêch: " + String.format("%.2f VNĐ", chenhLech)));
                document.add(new Paragraph("Ghi chú: " + txtGhiChu.getText()));
                document.add(new Paragraph("Ngày giơ in báo cáo: " + LocalDateTime.now()));
                document.close();
                JOptionPane.showMessageDialog(this, "Báo cáo đã được lưu tại: " + filePath, "Thông Báo", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi in báo cáo: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Đã hủy lưu file.", "Thông Báo", JOptionPane.WARNING_MESSAGE);
        }
    }





    private void resetFields() {
        txtMaKetCa.setText("");
        txtMaNhanVien.setText("");
        txtSoDuDauCa.setText("");
        txtSoDuTienMat.setText("");
        txtTongDoanhThu.setText("");
        txtGhiChu.setText("");
        lblChenhLech.setText("0.00 VNĐ");
    }
    
    private LocalDateTime ngayGioBatDau;
    private LocalDateTime ngayGioKetThuc;
    
   private void initData() {
        KetCa_DAO ketCaDAO = new KetCa_DAO();
        try {
            // Lấy mã kết ca tiếp theo
            String maKetCa = ketCaDAO.getNextMaKetCa();
            txtMaKetCa.setText(maKetCa);
             NhanVien nv = null;
                if(taiKhoan.getVaiTro().equals("NhanVien")){
                    nv = nv_dao.layThongTinNhanVien(taiKhoan.getTenNguoiDung());
                }
          txtMaNhanVien.setText(nv.getMaNhanVien());

            // Kiểm tra nếu ngày mới bắt đầu
            ngayGioBatDau = LocalDateTime.now();
            boolean isNewDay = ketCaDAO.isNewDay(ngayGioBatDau.toLocalDate());

            // Nếu là ngày mới, thiết lập số dư đầu ca
            double soDuDauCa;
            if (isNewDay) {
                soDuDauCa = 1000000.0;
            } else {
                soDuDauCa = ketCaDAO.getSoDuCuoiCaGanNhat();
            }

            txtSoDuDauCa.setText(DinhDangTien.chuyenSangVNDKetCa(soDuDauCa));

            // Lấy tổng doanh thu từ database
            double tongDoanhThu = ketCaDAO.getTongDoanhThu(nv.getMaNhanVien());
            txtTongDoanhThu.setText(DinhDangTien.chuyenSangVNDKetCa(tongDoanhThu));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi khởi tạo dữ liệu: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }





    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
