/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.thongkevabaocao;


import converter.DinhDangTien;
import dao.ChiTietHoaDon_DAO;
import dao.HoaDon_DAO;
import dao.NhanVien_DAO;

import java.util.Map;
import java.util.List;
import javax.swing.*;
import java.awt.*;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import modal.ChiTietHoaDon;
import modal.HoaDon;
import modal.NhanVien;
import modal.TaiKhoan;

import org.jfree.chart.*;
import org.jfree.chart.plot.*;
import org.jfree.chart.renderer.category.*;
import org.jfree.chart.labels.*;
import org.jfree.data.category.*;
        

/**
 *
 * @author ADMIN
 */
public class ManHinhThongKe extends javax.swing.JPanel {

    /**
     * Creates new form ManHinhThongKe
     */
    private static TaiKhoan taiKhoan;
    NhanVien_DAO nv_dao = new NhanVien_DAO();

    public ManHinhThongKe(TaiKhoan taiKhoan) throws SQLException {
        initComponents();
        this.taiKhoan = taiKhoan;
        HoaDon_DAO hoaDon_DAO = new HoaDon_DAO();
         
        taoPanelThongKeDoanhThu();
        addTabbedPaneToPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelThongKeTheoMonAn = new javax.swing.JPanel();
        jPanelThongKeDoanhThu = new javax.swing.JPanel();
        JpanelChucNang = new javax.swing.JPanel();
        ngayBatDau = new javax.swing.JLabel();
        ngayKetThuc = new javax.swing.JLabel();
        btnLoc = new javax.swing.JButton();
        JlabelThongKeTHeo = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jDateNgayBatDau = new com.toedter.calendar.JDateChooser();
        jDateNgayKetThuc = new com.toedter.calendar.JDateChooser();

        setPreferredSize(new java.awt.Dimension(933, 600));

        jPanelThongKeTheoMonAn.setBackground(new java.awt.Color(255, 255, 153));
        jPanelThongKeTheoMonAn.setPreferredSize(new java.awt.Dimension(333, 497));

        javax.swing.GroupLayout jPanelThongKeTheoMonAnLayout = new javax.swing.GroupLayout(jPanelThongKeTheoMonAn);
        jPanelThongKeTheoMonAn.setLayout(jPanelThongKeTheoMonAnLayout);
        jPanelThongKeTheoMonAnLayout.setHorizontalGroup(
            jPanelThongKeTheoMonAnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 933, Short.MAX_VALUE)
        );
        jPanelThongKeTheoMonAnLayout.setVerticalGroup(
            jPanelThongKeTheoMonAnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 531, Short.MAX_VALUE)
        );

        jPanelThongKeDoanhThu.setBackground(new java.awt.Color(255, 153, 0));
        jPanelThongKeDoanhThu.setPreferredSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout jPanelThongKeDoanhThuLayout = new javax.swing.GroupLayout(jPanelThongKeDoanhThu);
        jPanelThongKeDoanhThu.setLayout(jPanelThongKeDoanhThuLayout);
        jPanelThongKeDoanhThuLayout.setHorizontalGroup(
            jPanelThongKeDoanhThuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 953, Short.MAX_VALUE)
        );
        jPanelThongKeDoanhThuLayout.setVerticalGroup(
            jPanelThongKeDoanhThuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        JpanelChucNang.setBackground(new java.awt.Color(153, 255, 153));

        ngayBatDau.setText("Ngày bắt đầu : ");

        ngayKetThuc.setText("Ngày kết thúc :");

        btnLoc.setText("Lọc");
        btnLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocActionPerformed(evt);
            }
        });

        JlabelThongKeTHeo.setText("Thống kê theo :");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Doanh thu", "Món ăn" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JpanelChucNangLayout = new javax.swing.GroupLayout(JpanelChucNang);
        JpanelChucNang.setLayout(JpanelChucNangLayout);
        JpanelChucNangLayout.setHorizontalGroup(
            JpanelChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpanelChucNangLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ngayBatDau, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDateNgayBatDau, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ngayKetThuc, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jDateNgayKetThuc, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLoc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(JlabelThongKeTHeo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        JpanelChucNangLayout.setVerticalGroup(
            JpanelChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JpanelChucNangLayout.createSequentialGroup()
                .addGroup(JpanelChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(JpanelChucNangLayout.createSequentialGroup()
                        .addContainerGap(28, Short.MAX_VALUE)
                        .addGroup(JpanelChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(JpanelChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ngayBatDau, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(JlabelThongKeTHeo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(JpanelChucNangLayout.createSequentialGroup()
                                .addComponent(ngayKetThuc, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(JpanelChucNangLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(JpanelChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(JpanelChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jDateNgayBatDau, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jDateNgayKetThuc, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(JpanelChucNangLayout.createSequentialGroup()
                                .addComponent(btnLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelThongKeDoanhThu, javax.swing.GroupLayout.DEFAULT_SIZE, 933, Short.MAX_VALUE)
            .addComponent(jPanelThongKeTheoMonAn, javax.swing.GroupLayout.DEFAULT_SIZE, 933, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JpanelChucNang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanelThongKeDoanhThu, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JpanelChucNang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelThongKeTheoMonAn, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocActionPerformed
     Date ngayBatDau = jDateNgayBatDau.getDate();
    Date ngayKetThuc = jDateNgayKetThuc.getDate();
    Date ngayHienTai = new Date();  // Lấy ngày hiện tại
    
    // Kiểm tra nếu ngày bắt đầu và ngày kết thúc hợp lệ
    if (ngayBatDau == null || ngayKetThuc == null) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn ngày bắt đầu và ngày kết thúc", 
                                      "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    // Chuyển đổi từ Date sang LocalDate để so sánh chỉ phần ngày
    LocalDate localNgayHienTai = ngayHienTai.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        System.out.println("hien tai : " + localNgayHienTai);
    LocalDate localNgayBatDau = ngayBatDau.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
     System.out.println("hien tai1 : " + localNgayBatDau);
    LocalDate localNgayKetThuc = ngayKetThuc.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
     System.out.println("hien tai2 : " + localNgayKetThuc);

    // Kiểm tra ngày kết thúc phải lớn hơn hoặc bằng ngày hiện tại
    if (localNgayKetThuc.isBefore(localNgayBatDau)) {
        JOptionPane.showMessageDialog(this, "Ngày kết thúc phải lớn hơn hoặc bằng ngày bắt đầu", 
                                      "Lỗi", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Kiểm tra ngày bắt đầu phải nhỏ hơn hoặc bằng ngày kết thúc
    if (localNgayBatDau.isAfter(localNgayKetThuc)) {
        JOptionPane.showMessageDialog(this, "Ngày bắt đầu phải nhỏ hơn hoặc bằng ngày kết thúc", 
                                      "Lỗi", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Gọi hàm cập nhật biểu đồ với ngày đã lọc
    capNhatBieuDo(ngayBatDau, ngayKetThuc);
    }//GEN-LAST:event_btnLocActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String selectedItem = (String) jComboBox1.getSelectedItem(); // Lấy giá trị item đã chọn trong JComboBox
    updatePanelContent(selectedItem);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    
    private void updatePanelContent(String selectedItem) {
    jPanelThongKeTheoMonAn.removeAll(); // Xóa nội dung cũ

    if (selectedItem.equals("Doanh thu")) {
        // Tạo các tab cho doanh thu
        JTabbedPane tabbedPane = new JTabbedPane();

        // Tạo các panel cho mỗi tab
        JPanel panelTongQuan = new JPanel();
        panelTongQuan.add(new JLabel("Tổng quan"));
        // Thêm biểu đồ doanh thu vào tab "Tổng Quan"
        taoBiBieuDoDoanhThu(panelTongQuan);

        JPanel panelChiTiet = new JPanel();
        panelChiTiet.add(new JLabel("Chi tiết"));
        // Thêm bảng chi tiết vào tab "Chi tiết"
        taoBieuDoChiTiet(panelChiTiet);

        // Thêm các panel vào các tab
        tabbedPane.addTab("Tổng quan", panelTongQuan);
        tabbedPane.addTab("Chi tiết", panelChiTiet);

        // Thêm JTabbedPane vào jPanelThongKeTheoMonAn
        jPanelThongKeTheoMonAn.setLayout(new BorderLayout());
        jPanelThongKeTheoMonAn.add(tabbedPane, BorderLayout.CENTER);

    } else if (selectedItem.equals("Món ăn")) {
        // Tạo các tab cho món ăn
        JTabbedPane tabbedPane = new JTabbedPane();

        // Tạo panel Tổng quan
        JPanel panelTongQuan = new JPanel();
        panelTongQuan.setLayout(new BorderLayout());

        // Thêm biểu đồ vào panel Tổng quan
        taoBieuDoMonAn(panelTongQuan);

        // Tạo panel Chi tiết với bảng dữ liệu
        JPanel panelChiTiet = new JPanel(new BorderLayout());

        // Tạo tiêu đề cột cho bảng
        String[] columnNames = {"Mã Món Ăn", "Tên Món Ăn", "Giá", "Số Lượng Bán"};

        // Tạo model cho bảng
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);

        // Lấy dữ liệu món ăn từ DAO
        ChiTietHoaDon_DAO cthd = new ChiTietHoaDon_DAO();
        List<ChiTietHoaDon> topMonAn = cthd.layMonAnBanChayTrongThang();

        // Thêm dữ liệu vào model
        for (ChiTietHoaDon monAn : topMonAn) {
            String maMonAn = monAn.getMonAn().getMaMonAn();
            String tenMonAn = monAn.getMonAn().getTenMonAn();
            String gia = DinhDangTien.chuyenSangVND(monAn.getMonAn().getGiaMonAn());
            int soLuongBan = monAn.getSoLuongMonAn();
            tableModel.addRow(new Object[]{maMonAn, tenMonAn, gia, soLuongBan});
        }

        // Tạo bảng với model
        JTable table = new JTable(tableModel);

        // Thêm bảng vào JScrollPane
        JScrollPane scrollPane = new JScrollPane(table);
        panelChiTiet.add(scrollPane, BorderLayout.CENTER);

        // Thêm các panel vào các tab
        tabbedPane.addTab("Tổng quan", panelTongQuan);
        tabbedPane.addTab("Chi tiết", panelChiTiet);

        // Thêm JTabbedPane vào jPanelThongKeTheoMonAn
        jPanelThongKeTheoMonAn.setLayout(new BorderLayout());
        jPanelThongKeTheoMonAn.add(tabbedPane, BorderLayout.CENTER);
    }


    jPanelThongKeTheoMonAn.revalidate(); 
    jPanelThongKeTheoMonAn.repaint();   
}

    
 private void taoBieuDoMonAn(JPanel panel) {
    // Lấy dữ liệu món ăn bán chạy
    ChiTietHoaDon_DAO cthd = new ChiTietHoaDon_DAO();
    List<ChiTietHoaDon> topMonAn = cthd.layMonAnBanChayTrongThang();

    // Tạo dataset cho biểu đồ
    DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();
    for (ChiTietHoaDon monAn : topMonAn) {
        dataset1.addValue(monAn.getSoLuongMonAn(), "Số lượng bán", monAn.getMonAn().getTenMonAn());
    }

    // Tạo biểu đồ cột (Bar Chart)
    JFreeChart barChart = ChartFactory.createBarChart(
        "Top Món Ăn Bán Chạy",  
        "Món ăn",               // Trục X
        "Số lượng bán",         // Trục Y
        dataset1,               // Dữ liệu
        org.jfree.chart.plot.PlotOrientation.VERTICAL,
        true,                   // Hiển thị chú thích
        true,                   // Hiển thị thông tin tooltips
        false                   // Không hiển thị URL
    );

    // Đặt màu nền cho biểu đồ
    barChart.setBackgroundPaint(Color.decode("#FFF8DC"));
    barChart.getPlot().setBackgroundPaint(Color.WHITE);
    barChart.getPlot().setOutlinePaint(Color.BLUE);
    barChart.getPlot().setOutlineStroke(new BasicStroke(2.0f));

    // Thay đổi màu của cột và bật tooltips
    CategoryPlot plot = barChart.getCategoryPlot();
    BarRenderer renderer = new BarRenderer();
    renderer.setSeriesPaint(0, Color.decode("#FF6600"));

    // Bật tooltips cho renderer
    renderer.setDefaultToolTipGenerator(new StandardCategoryToolTipGenerator());
    plot.setRenderer(renderer);

    // Thêm biểu đồ vào JPanel
    ChartPanel chartPanel = new ChartPanel(barChart);
    chartPanel.setPreferredSize(new java.awt.Dimension(1300, 550));
    panel.add(chartPanel, BorderLayout.CENTER);
}


    JTextField textFieldHoaDonTrongTuan;
    JTextField textFieldDoanhThuTrongTuan;
    JTextField textFieldSoLuongBanHuy;
    JTextField textFieldDoanhThuNhanVienNgay;
    
private void taoPanelThongKeDoanhThu() throws SQLException {
    // Đặt layout của jPanelThongKeDoanhThu thành 1 dòng 4 cột
    jPanelThongKeDoanhThu.setLayout(new java.awt.GridLayout(1, 4, 10, 0)); // Lưới 1x4 với khoảng cách ngang 10px

    // Tạo phông chữ nhỏ hơn cho các tiêu đề
    java.awt.Font fontTieuDe = new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14);

    // Tạo danh sách các tiêu đề và mảng JTextField tương ứng
    String[] tieuDe = {
        "Hóa đơn trong tuần",
        "Doanh thu trong tuần",
        "Số lượng bàn bị hủy",
        "Thống kê doanh thu nhân viên trong ngày"
    };
    
    JTextField[] textFields = {
        textFieldHoaDonTrongTuan = new JTextField(),
        textFieldDoanhThuTrongTuan = new JTextField(),
        textFieldSoLuongBanHuy = new JTextField(),
        textFieldDoanhThuNhanVienNgay = new JTextField()
    };

    // Khởi tạo đối tượng DAO để lấy dữ liệu từ cơ sở dữ liệu
    HoaDon_DAO hoaDonDAO = new HoaDon_DAO();

    // Gán giá trị vào các JTextField
    int soHoaDonTrongTuan = hoaDonDAO.getHoaDonTrongTuan();
    textFieldHoaDonTrongTuan.setText(String.valueOf(soHoaDonTrongTuan));

    double doanhThuTrongTuan = hoaDonDAO.getDoanhThuTrongTuan();
    textFieldDoanhThuTrongTuan.setText(String.valueOf(DinhDangTien.chuyenSangVND(doanhThuTrongTuan)));

    int soBanHuy = hoaDonDAO.getSoLuongBanHuyTrongTuan();
    textFieldSoLuongBanHuy.setText(String.valueOf(soBanHuy));

     NhanVien nv = null;
     if(taiKhoan.getVaiTro().equalsIgnoreCase("NhanVien")){
        nv = nv_dao.layThongTinNhanVien(taiKhoan.getTenNguoiDung());
     }
  
//    double  doanhThuNhanVienTrongNgay = hoaDonDAO.getDoanhThuNhanVienTrongNgay(nv.getMaNhanVien());
//    System.out.println("id " + nv.getMaNhanVien());
//    if(doanhThuNhanVienTrongNgay < 0){
//        System.out.println("Khong co");
//    }
//    System.out.println(doanhThuNhanVienTrongNgay);
//    textFieldDoanhThuNhanVienNgay.setText(String.valueOf(DinhDangTien.chuyenSangVND(doanhThuNhanVienTrongNgay)));
// Nếu người dùng là nhân viên
    NhanVien nvv = null;
    if (taiKhoan.getVaiTro().equalsIgnoreCase("NhanVien")) {
        nvv = nv_dao.layThongTinNhanVien(taiKhoan.getTenNguoiDung());
        double doanhThuNhanVienTrongNgay = hoaDonDAO.getDoanhThuNhanVienTrongNgay(nvv.getMaNhanVien());
        System.out.println("id " + nvv.getMaNhanVien());
        if (doanhThuNhanVienTrongNgay < 0) {
            System.out.println("Khong co");
        }
        // Hiển thị doanh thu cho nhân viên
        textFieldDoanhThuNhanVienNgay.setText(String.valueOf(DinhDangTien.chuyenSangVND(doanhThuNhanVienTrongNgay)));
    } else if (taiKhoan.getVaiTro().equalsIgnoreCase("QuanLy")) {
        // Nếu là Quản Lý, bạn có thể bỏ qua phần này hoặc thay thế bằng logic khác
        textFieldDoanhThuNhanVienNgay.setText("Không áp dụng cho Quản Lý");
    }

    // Tạo các panel và gán dữ liệu từ textFields vào từng panel
    for (int i = 0; i < tieuDe.length; i++) {
        JPanel panel = new JPanel();
        panel.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.BLACK));
        panel.setLayout(new java.awt.BorderLayout());
        panel.setBackground(java.awt.Color.WHITE);

        JLabel lblTitle = new JLabel(tieuDe[i]);
        lblTitle.setFont(fontTieuDe);
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        JTextField textField = textFields[i];
        textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textField.setEditable(false);

        // Thêm các thành phần vào panel
        panel.add(lblTitle, java.awt.BorderLayout.NORTH);
        panel.add(textField, java.awt.BorderLayout.CENTER);

        // Thêm panel vào jPanelThongKeDoanhThu
        jPanelThongKeDoanhThu.add(panel);
    }
}



    
private void addTabbedPaneToPanel() {
    // Tạo các tab
    JTabbedPane tabbedPane = new JTabbedPane();

    // Tạo các panel cho mỗi tab
    JPanel panelTongQuan = new JPanel();
    panelTongQuan.add(new JLabel("Tổng quan"));
    // Thêm biểu đồ doanh thu vào tab "Tổng Quan"
    taoBiBieuDoDoanhThu(panelTongQuan);

    JPanel panelChiTiet = new JPanel();
    panelChiTiet.add(new JLabel("Chi tiết"));
    // Thêm bảng chi tiết vào tab "Chi tiết"
    taoBieuDoChiTiet(panelChiTiet);

    // Thêm các panel vào các tab
    tabbedPane.addTab("Tổng quan", panelTongQuan);
    tabbedPane.addTab("Chi tiết", panelChiTiet);

    // Thêm JTabbedPane vào jPanelThongKeTheoMonAn
    jPanelThongKeTheoMonAn.setLayout(new BorderLayout());
    jPanelThongKeTheoMonAn.add(tabbedPane, BorderLayout.CENTER);
}


private void taoBieuDoChiTiet(JPanel panelChiTiet) {
    HoaDon_DAO hoaDonDAO = new HoaDon_DAO();

    // Gọi hàm từ DAO để lấy dữ liệu chi tiết
    List<HoaDon> chiTietHoaDons = hoaDonDAO.getAllHoaDonThongKe();

    // Tạo dữ liệu cho JTable
    String[] columnNames = {"Mã Hóa Đơn", "Ngày Lập","Trạng Thái" , "Tổng Tiền", "VAT", "Chiết Khấu"};
    Object[][] rowData = new Object[chiTietHoaDons.size()][columnNames.length];

    for (int i = 0; i < chiTietHoaDons.size(); i++) {
        HoaDon item = chiTietHoaDons.get(i);
        rowData[i][0] = item.getMaHoaDon();
        rowData[i][1] = item.getNgayGioLap();
        rowData[i][2] = item.getTrangThaiThanhToan();
        rowData[i][3] = DinhDangTien.chuyenSangVND(item.getTongTien());
        rowData[i][4] = item.getVAT();
        rowData[i][5] = item.getChietKhau();
    }

    // Tạo JTable với dữ liệu
    JTable table = new JTable(rowData, columnNames);
    JScrollPane scrollPane = new JScrollPane(table);
    
    // Thêm JTable vào panel
    panelChiTiet.setLayout(new BorderLayout());
    panelChiTiet.add(scrollPane, BorderLayout.CENTER);
}

    private JFreeChart chart;
    private DefaultCategoryDataset dataset;
    
public void taoBiBieuDoDoanhThu(JPanel panelTongQuan) {
    HoaDon_DAO hoaDonDAO = new HoaDon_DAO();
    Map<String, Double> doanhThuData = hoaDonDAO.getDoanhThuTheoNgay();

    // Tạo dataset từ doanh thu data
    CategoryDataset datasets = createDataset(doanhThuData);  // Sử dụng dataset đã tạo sẵn

    // Tạo biểu đồ đường
    chart = ChartFactory.createLineChart(
            "Doanh Thu Theo Ngày",    // Tiêu đề biểu đồ
            "Ngày",                   // Tiêu đề trục x
            "Doanh Thu (VNĐ)",        // Tiêu đề trục y
            datasets,                  // Dữ liệu
            PlotOrientation.VERTICAL, // Kiểu biểu đồ
            true,                     // Hiển thị các legend
            true,                     // Hiển thị tooltip
            false                     // Hiển thị URL
    );

    // Thay đổi màu nền của toàn bộ biểu đồ
    chart.setBackgroundPaint(Color.decode("#FFFAF0"));

    // Lấy đối tượng plot của biểu đồ (CategoryPlot)
    CategoryPlot plot = (CategoryPlot) chart.getPlot();

    // Thay đổi màu nền của khu vực vẽ biểu đồ (plot area)
    plot.setBackgroundPaint(Color.WHITE);

    // Thay đổi màu sắc của các đường vẽ
    LineAndShapeRenderer renderer = new LineAndShapeRenderer();
    renderer.setSeriesPaint(0, Color.BLUE);
    renderer.setSeriesStroke(0, new BasicStroke(3.0f));  // Đổi độ dày đường
    plot.setRenderer(renderer);  // Áp dụng renderer vào plot

    // Cấu hình Tooltip cho biểu đồ
    renderer.setSeriesToolTipGenerator(0, new CategoryToolTipGenerator() {
        @Override
        public String generateToolTip(CategoryDataset dataset, int series, int category) {
            String date = dataset.getColumnKey(category).toString();
            Double value = dataset.getValue(series, category).doubleValue();
            return "Ngày: " + date + ", Doanh Thu: " + new DecimalFormat("##,##0").format(value);
        }
    });

    // Thêm biểu đồ vào panel
    ChartPanel chartPanel = new ChartPanel(chart);
    chartPanel.setPreferredSize(new java.awt.Dimension(1000, 600));
    chartPanel.setMouseWheelEnabled(true);

    // Sử dụng Layout phù hợp để panel tự động điều chỉnh
    panelTongQuan.setLayout(new BorderLayout());
    panelTongQuan.add(chartPanel, BorderLayout.CENTER);
}




    private void capNhatBieuDo(Date ngayBatDau, Date ngayKetThuc) {
    // Xóa dữ liệu cũ trên dataset
    dataset.clear();
    
    HoaDon_DAO hd = new HoaDon_DAO();
    // Lấy danh sách hóa đơn trong khoảng thời gian
    List<HoaDon> hoaDons = hd.layHoaDonTheoNgay(ngayBatDau, ngayKetThuc);

    // Thêm dữ liệu vào dataset từ danh sách hóa đơn
    for (HoaDon hoaDon : hoaDons) {
        // Sử dụng ngày giờ lập hóa đơn làm xValue và tổng tiền làm yValue
        String ngay = hoaDon.getNgayGioLap().toString();  // Chuyển ngày thành chuỗi
        dataset.addValue(hoaDon.getTongTien(), "Doanh Thu", ngay);  // Thêm dữ liệu vào dataset
    }

    // Cập nhật giao diện của biểu đồ (JFreeChart tự động nhận cập nhật từ dataset)
    chart.fireChartChanged();
}

      // Hàm tạo Dataset từ dữ liệu doanh thu
    private CategoryDataset createDataset(Map<String, Double> doanhThuData) {
         dataset = new DefaultCategoryDataset();

        for (Map.Entry<String, Double> entry : doanhThuData.entrySet()) {
            String ngay = entry.getKey();
            Double doanhThu = entry.getValue();
            dataset.addValue(doanhThu, "Doanh Thu", ngay);
        }

        return dataset;
    }

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JlabelThongKeTHeo;
    private javax.swing.JPanel JpanelChucNang;
    private javax.swing.JButton btnLoc;
    private javax.swing.JComboBox<String> jComboBox1;
    private com.toedter.calendar.JDateChooser jDateNgayBatDau;
    private com.toedter.calendar.JDateChooser jDateNgayKetThuc;
    private javax.swing.JPanel jPanelThongKeDoanhThu;
    private javax.swing.JPanel jPanelThongKeTheoMonAn;
    private javax.swing.JLabel ngayBatDau;
    private javax.swing.JLabel ngayKetThuc;
    // End of variables declaration//GEN-END:variables
}
